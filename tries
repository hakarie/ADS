#include <iostream>
#include <unordered_map>
#include <vector>
using namespace std;
class TrieNode {
public:
    unordered_map<char, TrieNode*> children;
    bool isEndOfWord;
    TrieNode() {
        isEndOfWord = false;
    }
};
class Trie {
private:
    TrieNode *root;
    void autoCompleteHelper(TrieNode *node, string prefix, vector<string> &results) {
        if (node->isEndOfWord) results.push_back(prefix);
        for (auto &child : node->children)
            autoCompleteHelper(child.second, prefix + child.first, results);
    }
public:
    Trie() {
        root = new TrieNode();
    }
    void insert(const string &word) {
        TrieNode *node = root;
        for (char ch : word) {
            if (node->children.find(ch) == node->children.end())
                node->children[ch] = new TrieNode();
            node = node->children[ch];
        }
        node->isEndOfWord = true;
    }
    bool search(const string &word) {
        TrieNode *node = root;
        for (char ch : word) {
            if (node->children.find(ch) == node->children.end()) return false;
            node = node->children[ch];
        }
        return node->isEndOfWord;
    }
vector<string> autoComplete(const string &prefix) {
        TrieNode *node = root;
        vector<string> results;
        for (char ch : prefix) {
            if (node->children.find(ch) == node->children.end()) return results; 
            node = node->children[ch];
        }
        autoCompleteHelper(node, prefix, results);
        return results;
    }
};
int main() {
    Trie trie;
    trie.insert("application");
    trie.insert("auto");
    trie.insert("bankai");
    trie.insert("ballistic");
    trie.insert("batman");
    trie.insert("leaf");
    string word = "aut";
    cout << "Spellcheck for '" << word << "': " << (trie.search(word) ? "Found" : "Not Found") << endl;
    word = "ballistic";
    cout << "Spellcheck for '" << word << "': " << (trie.search(word) ? "Found" : "Not Found") << endl;
    string prefix = "bank";
    cout << "\nAuto-complete suggestions for prefix '" << prefix << "':" << endl;
    vector<string> suggestions = trie.autoComplete(prefix);
    for (const string &s : suggestions) 
        cout << s << endl;
    return 0;
}
