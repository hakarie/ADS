#include <iostream>
using namespace std;

// Node structure for the leftist heap
template <typename T>
struct Node {
    T key;
    Node* left;
    Node* right;
    int npl; // Null path length

    Node(T val) {
        key = val;
        left = right = nullptr;
        npl = 0;
    }
};

// Leftist Heap Class
template <typename T>
class LeftistHeap {
private:
    Node<T>* root;

    // Merge two heaps recursively
    Node<T>* merge(Node<T>* h1, Node<T>* h2) {
        if (!h1) return h2;
        if (!h2) return h1;

        // Ensure the smallest root is always h1
        if (h1->key > h2->key) swap(h1, h2);

        // Merge the right child of h1 with h2
        h1->right = merge(h1->right, h2);

        // Maintain the leftist property
        if (!h1->left || (h1->left->npl < h1->right->npl))
            swap(h1->left, h1->right);

        // Update the NPL value
        h1->npl = h1->right ? h1->right->npl + 1 : 0;

        return h1;
    }

public:
    // Constructor
    LeftistHeap() : root(nullptr) {}

    // Insert a new element
    void insert(T val) {
        Node<T>* newNode = new Node<T>(val);
        root = merge(root, newNode);
    }

    // Get the minimum element (root)
    T getMin() {
        if (!root) throw runtime_error("Heap is empty");
        return root->key;
    }

    // Delete the minimum element (root)
    void deleteMin() {
        if (!root) throw runtime_error("Heap is empty");
        Node<T>* oldRoot = root;
        root = merge(root->left, root->right);
        delete oldRoot;
    }

    // Merge another leftist heap into this one
    void mergeWith(LeftistHeap<T>& other) {
        root = merge(root, other.root);
        other.root = nullptr;
    }

    // In-order traversal
    void inorder(Node<T>* node) {
        if (!node) return;
        inorder(node->left);
        cout << node->key << " ";
        inorder(node->right);
    }

    // Print the heap
    void printHeap() {
        cout << "Heap elements (in-order): ";
        inorder(root);
        cout << endl;
    }
};

// Driver code
int main() {
    LeftistHeap<int> heap;
    heap.insert(10);
    heap.insert(20);
    heap.insert(30);
    heap.insert(5);
    heap.insert(1);
    
    heap.printHeap();
    
    cout << "Minimum element: " << heap.getMin() << endl;
    
    heap.deleteMin();
    heap.printHeap();

    return 0;
}
