#include<iostream>
#include<vector>
using namespace std;

class DisjointSet{
        private:
                vector<int> parent, rank;
        public:
                DisjointSet(int n){
                        parent.resize(n);
                        rank.resize(n, 1);
                        for(int i = 0; i < n; i++){
                                parent[i] = i;
                        }
                }

                int find(int x){
                        if(parent[x] != x)
                                parent[x] = find(parent[x]);
                        return parent[x];
                }

                void unite(int x, int y){
                        int rootX = find(x);
                        int rootY = find(y);
                        if(rootX != rootY){
                                if(rank[rootX] > rank[rootY])
                                        parent[rootY] = rootX;
                                else if(rank[rootX] < rank[rootY])
                                        parent[rootX] = rootY;
                                else{
                                        parent[rootY] = rootX;
                                        rank[rootX]++;
                                }
                        }
                }

                void display(){
                        cout<<"Elements:\n";
                        for(int i = 0; i < parent.size(); i++){
                                cout<<i<<" ";
                        }

                        cout<<"\nParents:\n";
                        for(int i = 0; i < parent.size(); i++){
                                cout<<parent[i]<<" ";
                        }
                        cout<<endl;
                }
};

int main(){
        int n = 10;
        DisjointSet ds(n);

        ds.unite(1, 2);
        ds.unite(2, 3);
        ds.unite(4, 5);
        ds.unite(6, 7);
        ds.unite(7, 8);
        ds.unite(3, 8);

        cout<<"After union operations:\n";
        ds.display();

        cout<<"\nAre 2 and 5 connected? "<<(ds.find(2) == ds.find(5) ? "YES" : "NO")<<endl;
        cout<<"\nAre 3 and 7 connected? "<<(ds.find(3) == ds.find(7) ? "YES" : "NO")<<endl;

        return 0;
}
