#include <bits/stdc++.h>
#include <cstdlib>

using namespace std;
 
struct RBTreeNode {
    int data;
    char color;  // 'R' for Red, 'B' for Black
    RBTreeNode *left, *right, *parent;
};

// Global root pointer
RBTreeNode *RBTreeRoot = NULL;

// Function to create a new Red-Black Tree node
RBTreeNode *createRBTreeNode(int data) {
    RBTreeNode *node = new RBTreeNode;
    node->data = data;
    node->color = 'R';  // New nodes are always red
    node->left = node->right = node->parent = NULL;
    return node;
}

// Left rotate function
void leftRotate(RBTreeNode **root, RBTreeNode *x) {
    RBTreeNode *y = x->right;
    x->right = y->left;

    if (y->left != NULL)
        y->left->parent = x;

    y->parent = x->parent;

    if (x->parent == NULL)
        *root = y;
    else if (x == x->parent->left)
        x->parent->left = y;
    else
        x->parent->right = y;

    y->left = x;
    x->parent = y;
}

// Right rotate function
void rightRotate(RBTreeNode **root, RBTreeNode *y) {
    RBTreeNode *x = y->left;
    y->left = x->right;

    if (x->right != NULL)
        x->right->parent = y;

    x->parent = y->parent;

    if (y->parent == NULL)
        *root = x;
    else if (y == y->parent->left)
        y->parent->left = x;
    else
        y->parent->right = x;

    x->right = y;
    y->parent = x;
}

// Fixup function after insertion
void RBInsertFixup(RBTreeNode **root, RBTreeNode *z) {
    while (z->parent && z->parent->color == 'R') {
        if (z->parent == z->parent->parent->left) {
            RBTreeNode *y = z->parent->parent->right;
            if (y && y->color == 'R') { // Case 1
                z->parent->color = 'B';
                y->color = 'B';
                z->parent->parent->color = 'R';
                z = z->parent->parent;
            } else {
                if (z == z->parent->right) { // Case 2
                    z = z->parent;
                    leftRotate(root, z);
                }
                z->parent->color = 'B';  // Case 3
                z->parent->parent->color = 'R';
                rightRotate(root, z->parent->parent);
            }
        } else {
            RBTreeNode *y = z->parent->parent->left;
            if (y && y->color == 'R') { // Mirror Case 1
                z->parent->color = 'B';
                y->color = 'B';
                z->parent->parent->color = 'R';
                z = z->parent->parent;
            } else {
                if (z == z->parent->left) { // Mirror Case 2
                    z = z->parent;
                    rightRotate(root, z);
                }
                z->parent->color = 'B';  // Mirror Case 3
                z->parent->parent->color = 'R';
                leftRotate(root, z->parent->parent);
            }
        }
    }
    (*root)->color = 'B';
}

// Insert function
RBTreeNode *insertRBTree(RBTreeNode *root, int data) {
    RBTreeNode *z = createRBTreeNode(data);
    RBTreeNode *y = NULL;
    RBTreeNode *x = root;

    while (x != NULL) {
        y = x;
        if (z->data < x->data)
            x = x->left;
        else
            x = x->right;
    }

    z->parent = y;
    if (y == NULL)
        root = z;
    else if (z->data < y->data)
        y->left = z;
    else
        y->right = z;

    RBInsertFixup(&root, z);
    return root;
}

// Inorder traversal function
void inorderRBTree(RBTreeNode *root) {
    if (root != NULL) {
        inorderRBTree(root->left);
        cout << root->data << " ";
        inorderRBTree(root->right);
    }
}

// Function to find minimum node in subtree
RBTreeNode *minimum(RBTreeNode *node) {
    while (node->left != NULL)
        node = node->left;
    return node;
}

// Function to replace node
void rbTransplant(RBTreeNode **root, RBTreeNode *u, RBTreeNode *v) {
    if (u->parent == NULL)
        *root = v;
    else if (u == u->parent->left)
        u->parent->left = v;
    else
        u->parent->right = v;

    if (v != NULL)
        v->parent = u->parent;
}

// Delete function
RBTreeNode *deleteRBTree(RBTreeNode *root, int key) {
    RBTreeNode *z = root, *y, *x;

    // Find the node to delete
    while (z != NULL && z->data != key) {
        if (key < z->data)
            z = z->left;
        else
            z = z->right;
    }

    if (z == NULL)
        return root;

    y = z;
    char yOriginalColor = y->color;

    if (z->left == NULL) {
        x = z->right;
        rbTransplant(&root, z, z->right);
    } else if (z->right == NULL) {
        x = z->left;
        rbTransplant(&root, z, z->left);
    } else {
        y = minimum(z->right);
        yOriginalColor = y->color;
        x = y->right;

        if (y->parent == z)
            x->parent = y;
        else {
            rbTransplant(&root, y, y->right);
            y->right = z->right;
            y->right->parent = y;
        }

        rbTransplant(&root, z, y);
        y->left = z->left;
        y->left->parent = y;
        y->color = z->color;
    }

    if (yOriginalColor == 'B' && x != NULL)
        x->color = 'B';

    delete z;
    return root;
}

// Menu function
void menu() {
    int choice, key;
    cout << "\nRed-Black Tree Menu:\n";
    cout << "1. Insert\n";
    cout << "2. Delete\n";
    cout << "3. Display (Inorder)\n";
    cout << "4. Exit\n";
    while (true) {
        cout << "Enter choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter key to insert: ";
                cin >> key;
                RBTreeRoot = insertRBTree(RBTreeRoot, key);
                break;
            case 2:
                cout << "Enter key to delete: ";
                cin >> key;
                RBTreeRoot = deleteRBTree(RBTreeRoot, key);
                break;
            case 3:
                cout << "Red-Black Tree (Inorder): ";
                inorderRBTree(RBTreeRoot);
                cout << endl;
                break;
            case 4:
                exit(0);
            default:
                cout << "Invalid choice!\n";
        }
    }
}

int main() {
    menu();
    return 0;
}
