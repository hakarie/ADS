#include <iostream>
#include <cstdlib>
#include <cmath>

#define MAX_LEVEL 3

using namespace std;

template<typename T>
class Node {
public:
    T key;
    Node** forward;
    
    Node(T key, int level) {
        this->key = key;
        forward = new Node*[level + 1];
        for (int i = 0; i <= level; i++)
            forward[i] = nullptr;
    }
};

template<typename T>
class SkipList {
private:
    int level;
    Node<T>* head;
    int deterministicCounter;

    int deterministicLevel() {
        return (deterministicCounter++) % MAX_LEVEL;
    }

public:
    SkipList() : deterministicCounter(0) {
        level = 0;
        head = new Node<T>(T(), MAX_LEVEL);
    }

    void insert(T key) {
        Node<T>* current = head;
        Node<T>* update[MAX_LEVEL + 1];
        
        for (int i = level; i >= 0; i--) {
            while (current->forward[i] != nullptr && current->forward[i]->key < key)
                current = current->forward[i];
            update[i] = current;
        }
        
        int newLevel = deterministicLevel();
        if (newLevel > level) {
            for (int i = level + 1; i <= newLevel; i++)
                update[i] = head;
            level = newLevel;
        }
        
        Node<T>* newNode = new Node<T>(key, newLevel);
        for (int i = 0; i <= newLevel; i++) {
            newNode->forward[i] = update[i]->forward[i];
            update[i]->forward[i] = newNode;
        }
    }

    bool search(T key) {
        Node<T>* current = head;
        for (int i = level; i >= 0; i--) {
            while (current->forward[i] != nullptr && current->forward[i]->key < key)
                current = current->forward[i];
        }
        current = current->forward[0];
        return (current != nullptr && current->key == key);
    }

    void remove(T key) {
        Node<T>* current = head;
        Node<T>* update[MAX_LEVEL + 1];
        
        for (int i = level; i >= 0; i--) {
            while (current->forward[i] != nullptr && current->forward[i]->key < key)
                current = current->forward[i];
            update[i] = current;
        }
        
        current = current->forward[0];
        if (current != nullptr && current->key == key) {
            for (int i = 0; i <= level; i++) {
                if (update[i]->forward[i] != current)
                    break;
                update[i]->forward[i] = current->forward[i];
            }
            delete current;
            while (level > 0 && head->forward[level] == nullptr)
                level--;
        }
    }

    void display() {
        for (int i = level; i >= 0; i--) {
            Node<T>* current = head->forward[i];
            cout << "Level " << i << ": ";
            while (current != nullptr) {
                cout << current->key << " ";
                current = current->forward[i];
            }
            cout << endl;
        }
    }
};

int main() {
    SkipList<int> list;
    
    list.insert(3);
    list.insert(6);
    list.insert(7);
    list.insert(9);
    list.insert(12);
    list.insert(19);
    list.insert(17);
    list.insert(26);
    list.insert(21);
    list.insert(25);

    cout << "Skip List after insertions:" << endl;
    list.display();
    
    int key = 19;
    cout << "Searching for " << key << ": " << (list.search(key) ? "Found" : "Not Found") << endl;
    
    list.remove(19);
    cout << "Skip List after deleting " << key << ":" << endl;
    list.display();
    
    return 0;
}
