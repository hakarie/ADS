#include <iostream>
#include <queue>
using namespace std;

// Node structure
struct Node {
    int key;
    Node *left, *right;
    int height;
};

// Get height of the node
int height(Node *N) {
    return (N == nullptr) ? 0 : N->height;
}

// Get balance factor
int getBalance(Node *N) {
    return (N == nullptr) ? 0 : height(N->left) - height(N->right);
}

// Create a new node
Node* newNode(int key) {
    Node* node = new Node();
    node->key = key;
    node->left = node->right = nullptr;
    node->height = 1; // New node is initially added at leaf
    return node;
}

// Right rotation
Node* rightRotate(Node* y) {
    cout<<"right Rotate"<<endl;
    Node* x = y->left;
    Node* T2 = x->right;
    x->right = y;
    y->left = T2;
    y->height = max(height(y->left), height(y->right)) + 1;
    x->height = max(height(x->left), height(x->right)) + 1;
    return x;
}

// Left rotation
Node* leftRotate(Node* x) {
    cout<<"left Rotate"<<endl;
    Node* y = x->right;
    Node* T2 = y->left;
    y->left = x;
    x->right = T2;
    x->height = max(height(x->left), height(x->right)) + 1;
    y->height = max(height(y->left), height(y->right)) + 1;
    return y;
}

// Insert a node
Node* insert(Node* node, int key) {
    if (node == nullptr) return newNode(key);
    if (key < node->key)
        node->left = insert(node->left, key);
    else if (key > node->key)
        node->right = insert(node->right, key);
    else
        return node; // No duplicates allowed
    
    node->height = 1 + max(height(node->left), height(node->right));
    int balance = getBalance(node);
    
    // Left Left Case
    if (balance > 1 && key < node->left->key)
        return rightRotate(node);
    // Right Right Case
    if (balance < -1 && key > node->right->key)
        return leftRotate(node);
    // Left Right Case
    if (balance > 1 && key > node->left->key) {
        node->left = leftRotate(node->left);
        return rightRotate(node);
    }
    // Right Left Case
    if (balance < -1 && key < node->right->key) {
        node->right = rightRotate(node->right);
        return leftRotate(node);
    }
    return node;
}

// Find the node with minimum value
Node* minValueNode(Node* node) {
    Node* current = node;
    while (current->left != nullptr)
        current = current->left;
    return current;
}

// Delete a node
Node* deleteNode(Node* root, int key) {
    if (root == nullptr) return root;
    if (key < root->key)
        root->left = deleteNode(root->left, key);
    else if (key > root->key)
        root->right = deleteNode(root->right, key);
    else {
        if ((root->left == nullptr) || (root->right == nullptr)) {
            Node* temp = root->left ? root->left : root->right;
            if (temp == nullptr) {
                temp = root;
                root = nullptr;
            } else
                *root = *temp;
            delete temp;
        } else {
            Node* temp = minValueNode(root->right);
            root->key = temp->key;
            root->right = deleteNode(root->right, temp->key);
        }
    }
    
    if (root == nullptr) return root;
    root->height = 1 + max(height(root->left), height(root->right));
    int balance = getBalance(root);
    
    // Balancing cases
    if (balance > 1 && getBalance(root->left) >= 0)
        return rightRotate(root);
    if (balance > 1 && getBalance(root->left) < 0) {
        root->left = leftRotate(root->left);
        return rightRotate(root);
    }
    if (balance < -1 && getBalance(root->right) <= 0)
        return leftRotate(root);
    if (balance < -1 && getBalance(root->right) > 0) {
        root->right = rightRotate(root->right);
        return leftRotate(root);
    }
    return root;
}

// Level order traversal with brackets
void levelOrder(Node* root) {
    if (root == nullptr) return;
    queue<Node*> q;
    q.push(root);
    int levelSize;
    while (!q.empty()) {
        levelSize = q.size();
        cout << "[";
        for (int i = 0; i < levelSize; i++) {
            Node* node = q.front();
            q.pop();
            cout << node->key;
            if (i < levelSize - 1) cout << " ";
            if (node->left != nullptr) q.push(node->left);
            if (node->right != nullptr) q.push(node->right);
        }
        cout << "] ";
    }
    cout << endl;
}

int main() {
    Node* root = nullptr;
    int elements[] = {50, 80, 70, 40, 60, 30, 10, 65};
    for (int key : elements){
        cout<<"insert "<<key<<endl;
        root = insert(root, key);
        levelOrder(root);
    }
    
    cout << "Level order traversal of AVL tree: ";
    levelOrder(root);
    
    cout<<"\ndelete 30"<<endl;
    root = deleteNode(root, 30); // Internal node
    levelOrder(root);
    cout<<"delete 50"<<endl;
    root = deleteNode(root, 50); // Internal node
    levelOrder(root);
    cout<<"delete 10"<<endl;
    root = deleteNode(root, 10); // Leaf node
    levelOrder(root);
    
    
    return 0;
}
