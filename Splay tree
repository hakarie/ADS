#include <iostream>
#include <queue>
using namespace std;

struct Node {
    int key;
    Node *left, *right;
    Node(int k) : key(k), left(NULL), right(NULL) {}
};

// Right Rotate
Node* rightRotate(Node* x) {
    Node* y = x->left;
    x->left = y->right;
    y->right = x;
    return y;
}

// Left Rotate
Node* leftRotate(Node* x) {
    Node* y = x->right;
    x->right = y->left;
    y->left = x;
    return y;
}

// Splay operation
Node* splay(Node* root, int key) {
    if (!root || root->key == key) return root;

    // Key lies in left subtree
    if (key < root->key) {
        if (!root->left) return root;
        
        // Zig-Zig (Left Left)
        if (key < root->left->key) {
            root->left->left = splay(root->left->left, key);
            root = rightRotate(root);
        }
        // Zig-Zag (Left Right)
        else if (key > root->left->key) {
            root->left->right = splay(root->left->right, key);
            if (root->left->right)
                root->left = leftRotate(root->left);
        }

        return (root->left) ? rightRotate(root) : root;
    }
    // Key lies in right subtree
    else {
        if (!root->right) return root;

        // Zag-Zag (Right Right)
        if (key > root->right->key) {
            root->right->right = splay(root->right->right, key);
            root = leftRotate(root);
        }
        // Zag-Zig (Right Left)
        else if (key < root->right->key) {
            root->right->left = splay(root->right->left, key);
            if (root->right->left)
                root->right = rightRotate(root->right);
        }

        return (root->right) ? leftRotate(root) : root;
    }
}

// Insert operation
Node* insert(Node* root, int key) {
    if (!root) return new Node(key);
    
    root = splay(root, key);
    
    if (root->key == key) return root; // Key already exists

    Node* newNode = new Node(key);
    if (key < root->key) {
        newNode->right = root;
        newNode->left = root->left;
        root->left = NULL;
    } else {
        newNode->left = root;
        newNode->right = root->right;
        root->right = NULL;
    }
    return newNode;
}

// Delete operation
Node* deleteNode(Node* root, int key) {
    if (!root) return NULL;

    root = splay(root, key);

    if (root->key != key) return root; // Key not found

    if (!root->left) {
        Node* temp = root->right;
        delete root;
        return temp;
    } else {
        Node* temp = splay(root->left, key);
        temp->right = root->right;
        delete root;
        return temp;
    }
}

// Level Order Traversal
void levelOrder(Node* root) {
    if (!root) {
        cout << "NULL\n";
        return;
    }

    queue<Node*> q;
    q.push(root);

    while (!q.empty()) {
        int size = q.size();
        cout << "[";
        for (int i = 0; i < size; i++) {
            Node* curr = q.front();
            q.pop();

            if (curr) {
                cout << curr->key;
                q.push(curr->left);
                q.push(curr->right);
            } else {
                cout << "NULL";
            }

            if (i < size - 1) cout << " ";
        }
        cout << "] ";
    }
    cout << endl;
}

int main() {
    Node* root = NULL;

    // Insert elements
    root = insert(root, 10);
    root = insert(root, 20);
    root = insert(root, 30);
    root = insert(root, 40);
    root = insert(root, 50);
    root = insert(root, 25);

    cout << "Level Order Traversal: ";
    levelOrder(root);

    // Delete an element
    root = deleteNode(root, 20);
    cout << "After deleting 20: ";
    levelOrder(root);

    return 0;
}
